version: "3"

services:
  traefik:
    image: "traefik:v2.4"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.http.address=:80"
      - "--global.sendAnonymousUsage=false"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  db:
    container_name: "${DB_HOST}"
    image: postgres:12.4-alpine
    volumes:
      - "./.data:/var/lib/postgresql/data:rw"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: "${DB_DATABASE}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.pg-web.rule: Host(`${DB_HOST}`)
      traefik.http.routers.pg-web.entrypoints: http

  api:
    depends_on:
      - "db"
    build:
      context: ./api
    restart: always
    command: sh -c "yarn install && yarn dev"
    container_name: "${API_URL}"  # Nome do container alterado para um formato v√°lido
    volumes:
      - "./api:/usr/boilerplate"
      - "/usr/boilerplate/node_modules"
    ports:
      - "${API_PORT}:${API_PORT}"
      - "5555:5555"
    environment:
      DATABASE_URL: "${DATABASE_URL}"
      API_PORT: "${API_PORT}"
      PROJECT_NAME: "${PROJECT_NAME}"
      TOKEN_SECRET: "${TOKEN_SECRET}"
    labels:
      traefik.enable: true
      traefik.http.routers.api-web.rule: Host(`${API_URL}`)
      traefik.http.routers.api-web.entrypoints: http
